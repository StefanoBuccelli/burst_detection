library(pracma)
devtools::install_github("sje30/sjemea")
R CMD INSTALL C:\Users\BuccelliLab\Documents\GitHub\sjemea
install("C:\Users\BuccelliLab\Documents\GitHub\sjemea")
install("C:/Users\BuccelliLab\Documents\GitHub\sjemea")
install("C:/Users/BuccelliLab/Documents/GitHub/sjemea")
install.packages("C:/Users/BuccelliLab/Documents/GitHub/sjemea")
devtools::install_github("C:/Users/BuccelliLab/Documents/GitHub/sjemea")
devtools::install_github("sje30/sjemea")
start<-0
load("~/GitHub/burstanalysis/Simulation_results/sim_data.RData")
source("C:/Users/BuccelliLab/Documents/GitHub/burstanalysis/Burst_detection_methods/RS_method.R")
RS.method(sim.data$reg.bursting[[1]]$spks)
RS.method(sim.data$reg.bursting[[1]]$spks,3)
devtools::install_github("sje30/sjemea")
library(devtools)
devtools::install_github("sje30/sjemea")
devtools::install_github("sje30/sjemea")
devtools::install_github("sje30/sjemea")
devtools::install_github("ellesec/burstanalysis")
sourceAll("C:\Users\BuccelliLab\Documents\GitHub\burstanalysis")
sourceAll("C:/Users/BuccelliLab/Documents/GitHub/burstanalysis")
install.packages("Jmisc")
sourceAll("C:/Users/BuccelliLab/Documents/GitHub/burstanalysis")
library(Jmisc)
sourceAll("C:/Users/BuccelliLab/Documents/GitHub/burstanalysis")
sourceAll("C:/Users/BuccelliLab/Documents/GitHub/burstanalysis/Burst_detection_methods")
load("~/GitHub/burstanalysis/Simulation_results/sim_data.RData")
logisi.pasq.method(sim.data$reg.bursting[[1]]$spks)
CMA.method(sim.data$reg.bursting[[1]]$spks)
RS.method(sim.data$reg.bursting[[1]]$spks)
RS.method(sim.data$reg.bursting[[1]]$spks,3)
RS.method(sim.data$reg.bursting[[1]]$spks,5)
require(burstHSMM)
install.packages("burstHSMM")
R CMD BUILD C:\Users\BuccelliLab\Documents\GitHub\burstanalysis\Burst_detection_methods/burstHSMM_1.0-1.tar.gz
install.packages(C:\Users\BuccelliLab\Documents\GitHub\burstanalysis\Burst_detection_methods/burstHSMM_1.0-1.tar.gz, repos = NULL, type="source")
install.packages("C:\Users\BuccelliLab\Documents\GitHub\burstanalysis\Burst_detection_methods/burstHSMM_1.0-1.tar.gz", repos = NULL, type="source")
install.packages("C:/Users/BuccelliLab/Documents/GitHub/burstanalysis/Burst_detection_methods/burstHSMM_1.0-1.tar.gz", repos = NULL, type="source")
require(burstHSMM)
HSMM.method(sim.data$reg.bursting[[1]]$spks)
HSMM.method(sim.data$reg.bursting[[1]]$spks,500)
HSMM.method(sim.data$reg.bursting[[1]]$spks,0.5)
CMA.method((1:1000))
CMA.method((1:1000))
CMA.method(rand(1,100))
CMA.method(rand(1,100))
rand(1,1)
library("pracma", lib.loc="~/R/win-library/3.5")
library("pracma", lib.loc="~/R/win-library/3.5")
rand(1,1)
CMA.method(rand(1,100))
CMA.method(round(rand(1,100)))
CMA.method(round(rand(1,100)*100))
round(rand(1,100)*100)
burst.breaks=1:100
isi.list<-sapply(seq(length(burst.breaks) - 1), function(i) indxs[(burst.breaks[i] + 1):burst.breaks[i+1]])
indxs=1:10
isi.list<-sapply(seq(length(burst.breaks) - 1), function(i) indxs[(burst.breaks[i] + 1):burst.breaks[i+1]])
View(hennig.method)
isi.list
isi.list<-sapply(seq(length(burst.breaks) - 1), function(i) indxs[(burst.breaks[i] + 1):burst.breaks[i+1]])
isi.list
isi.list<-sapply(seq(length(burst.breaks) - 1), function(indxs) indxs[(burst.breaks[i] + 1):burst.breaks[i+1]])
isi.list<-sapply(seq(length(burst.breaks) - 1), function(i) indxs[(burst.breaks[i] + 1):burst.breaks[i+1]])
df <- read.table("C:\Users\BuccelliLab\Documents\GitHub\burstanalysis\spikes_13.txt",
header = FALSE)
df <- read.table("C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\spikes_13.txt",
header = FALSE)
CMA.method(df)
# run one method
CMA.method(df)
length(spike.train)
View(spike.train)
# Load spikes
df <- read.table("C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\spikes_13.txt",
header = FALSE, sep="\n")
# run one method
CMA.method(df)
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
View(df)
# run one method
CMA.method(df)
length(spike.train)
spike.train
length(spike.train)
h <- scan("C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\spikes_13.txt")
# run one method
CMA.method(df)
length(spike.train)
View(df)
CMA.method(df)
result<-NA
return(result)
#Do not perform burst detection if less than min.val spikes in the spike train
if (length(spike.train)<min.val) {
result<-NA
return(result)
}
isi<-diff(spike.train)
isi.range<-max(isi)-min(isi)
eps<-isi.range/1000
CMA.method(df)
rm(list = ls(all.names = TRUE))
# run one method
CMA.method(df)
library("e1071", lib.loc="~/R/win-library/3.5")
# run one method
CMA_method(df)
df <- scan("C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\spikes_13.txt")
df <- scan("C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\spikes_13.txt")
CMA_method(df)
# run one method
CMA_method(df,plot="true")
CMA_method(df,plot="true")
# run one method
CMA_method(df,plot="true")
CMA_method(df)
CMA_method(df)
CMA_method(df)
df <- scan("C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\spikes_13.txt")
# Load spikes
df <- scan("C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\spikes_13.txt")
df <- scan("C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\spikes_13.txt")
# Load spikes
df <- scan("C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\spikes_13.txt")
CMA_method(df)
CMA_method(df)
CMA_method(df)
CMA_method(df)
CMA_method(df)
CMA_method(df)
CMA_method(df)
View(CMA.method)
CMA_method(df)
devtools::install_github("sje30/sjemea")
library(e1071)
CMA_method(df)
require("CMA_method")
rm(list = ls())
df <- scan("C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\spikes_13.txt")
df(1)
df[0]
df[7]
??CMA_method
CMA_method(df)
getAnywhere(CMA_method)
getAnywhere("CMA_method")
getAnywhere("CMA_method")
getAnywhere("CMA_method.R")
setwd("~/GitHub/burstanalysis/Burst_detection_methods")
getAnywhere("CMA_method.R")
getAnywhere("CMA_method.R")
getAnywhere(CMA_method.R)
getAnywhere(CMA_method)
install.packages("CMA_method")
load("~/GitHub/burstanalysis/Burst_detection_methods/.RData")
CMA_method(df)
a=10
CMA_method(df)
a=10
a=10
a=10
a=10
a=10
a=10
a=10
setwd("~/GitHub/burstanalysis/Burst_detection_methods")
CMA_method(df)
a=12
if (is.na(skew)){
result<-NA
return(result)
}
devtools::install_github("sje30/sjemea")
CMA.method(df)
CMA.method(df,plot=TRUE)
CMA.method(df,plot=TRUE)
hist(isi, breaks =seq(0, max(isi)+eps, eps), plot=TRUE)
a=CMA.method(df)
View(a)
results.CMA=CMA.method(df)
View(results.CMA)
write.csv(results.CMA, file = "C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\result_CMA.csv")
View(a)
# run one method
results.CMA=CMA.method(df)
df <- scan("C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\spikes_13.txt")
CMA.method(df)
df <- scan("C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\spikes_13.txt")
df <- scan("C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\spikes_13.txt")
results.hennig_method=hennig.method(df)
results.hennig_method=hennig.method(df)
results.hennig_method=hennig.method(df)
df <- scan("C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\spikes_s.txt")
df <- scan("C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\spikes_s.txt")
# run CMA and write to csv file
results.CMA=CMA.method(df)
write.csv(results.CMA, file = "C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\result_CMA.csv")
# run hennig_method and write to csv file
results.hennig_method=hennig.method(df)
write.csv(results.results.hennig_method, file = "C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\results.hennig_method.csv")
# run hennig_method and write to csv file
results.hennig_method=hennig.method(df)
write.csv(results.results.hennig_method, file = "C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\results.hennig_method.csv")
results.hennig_method=hennig.method(df)
df <- scan("C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\spikes_s.txt")
results.CMA=CMA.method(df)
write.csv(results.CMA, file = "C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\result_CMA.csv")
results.hennig_method=hennig.method(df)
write.csv(results.results.hennig_method, file = "C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\results.hennig_method.csv")
write.csv(results.hennig_method, file = "C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\results.hennig_method.csv")
write.csv(results.hennig_method, file = "C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\result_hennig_method.csv")
results.pasquale_method=logisi.pasq.method(df)
write.csv(results.pasquale_method, file = "C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\result_pasquale_method.csv")
results.pasquale_method=logisi.pasq.method(df)
library(pracma)
results.pasquale_method=logisi.pasq.method(df)
library(pracma)
library(e1071)
results.pasquale_method=logisi.pasq.method(df)
results.pasquale_method=logisi.pasq.method(df)
nrow(bursts)
library(sjemea)
results.MI_method=MI.method(df)
??mi.find.bursts
anywhere(mi.find.bursts)
install.packages("devtools")
devtools::install_github("sje30/sjemea")
install.packages("devtools")
results.MI_method=MI.method(df)
library(pracma)
library(e1071)
library(sjemea)
results.MI_method=MI.method(df)
mi.find.bursts(df)
open mi.find.bursts
file.edit(mi.find.bursts)
file.edit("mi.find.bursts")
file.edit("mi.find.bursts.R")
require(testthat)
require(sjemea)
test_package("sjemea")
results.PS_method=PS.method(df)
write.csv(results.PS_method, file = "C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\results.PS_method.csv")
write.csv(results.PS_method, file = "C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\result_PS_method.csv")
results.RGS_method=RGS.method(df)
results.RS_method=RS.method(df)
log(0.01)
-log(0.01)
results.RS_method=RS.method(df,-log(0.01))
View(results.RS_method)
View(results.RS_method)
write.csv(results.RS_method, file = "C:\\Users\\BuccelliLab\\Documents\\GitHub\\burstanalysis\\result_RS_method.csv")
